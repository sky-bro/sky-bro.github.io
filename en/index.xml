<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>k4i's blog</title><link>https://k4i.top/en/</link><description>Recent content on k4i's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>sky_io@outlook.com (K4i)</managingEditor><webMaster>sky_io@outlook.com (K4i)</webMaster><copyright>All content is subject to the license of<a rel="license noopener" href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">CC BY-NC-SA 4.0</a> .</copyright><atom:link href="https://k4i.top/en/index.xml" rel="self" type="application/rss+xml"/><item><title>Shuffling</title><link>https://k4i.top/en/posts/shuffling/</link><pubDate>Wed, 19 May 2021 14:07:34 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 19 May 2021 15:49:51 +0800</atom:modified><guid>https://k4i.top/en/posts/shuffling/</guid><description>&lt;p>How to generate a random sequence (permutation) of a finite sequence.&lt;/p></description><dc:creator>&lt;a href="https://k4i.top" class="theme-link">k4i&lt;/a></dc:creator><media:content url="https://k4i.topimages/icons/shuffle.jpg" medium="image"><media:title type="html">featured image</media:title></media:content><category>shuffle</category><category>random</category><category>Data Structure &amp; Algorithm</category></item><item><title>Sampling</title><link>https://k4i.top/en/posts/sampling/</link><pubDate>Thu, 22 Apr 2021 11:31:59 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 19 May 2021 00:24:44 +0800</atom:modified><guid>https://k4i.top/en/posts/sampling/</guid><description>&lt;p>How to select k out of N objects.&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator></item><item><title>Heap Simple Implementation</title><link>https://k4i.top/en/posts/heap-simple-implementation/</link><pubDate>Sun, 11 Apr 2021 16:17:17 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Sun, 11 Apr 2021 20:10:19 +0800</atom:modified><guid>https://k4i.top/en/posts/heap-simple-implementation/</guid><description>&lt;p>max_heap: &lt;code>A[0]&lt;/code> is the maximum value&lt;br />
min_heap: &lt;code>A[0]&lt;/code> is the minimum value&lt;br />
source code: &lt;a href="https://github.com/sky-bro/AC/tree/master/Algorithms/Heap">AC/Algorithms/Heap&lt;/a>&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><category>heap</category><category>Data Structure &amp; Algorithm</category></item><item><title>Hugo, Deploy With Github Actions</title><link>https://k4i.top/en/posts/deploy-with-github-actions/</link><pubDate>Thu, 25 Feb 2021 13:52:50 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Thu, 25 Feb 2021 21:03:31 +0800</atom:modified><guid>https://k4i.top/en/posts/deploy-with-github-actions/</guid><description>&lt;p>I used to think deploying my blog with github actions is unnecessary, but now&amp;hellip; (真香)&lt;br />
Deploying with github actions is so much faster.&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><category>hugo</category><category>github actions</category></item><item><title>Understand RSA, a Top Dwon Approach</title><link>https://k4i.top/en/posts/understand-rsa-a-top-dwon-approach/</link><pubDate>Wed, 03 Feb 2021 12:12:54 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Thu, 04 Feb 2021 13:45:32 +0800</atom:modified><guid>https://k4i.top/en/posts/understand-rsa-a-top-dwon-approach/</guid><description>&lt;p>My simple note on the RSA algorithm.&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><category>RSA</category><category>Crypto</category><category>Crypto</category><category>Data Structure &amp; Algorithm</category></item><item><title>Binary Indexed Tree, or Fenwick Tree</title><link>https://k4i.top/en/posts/binary-indexed-tree-or-fenwick-tree/</link><pubDate>Wed, 20 Jan 2021 14:42:38 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Mon, 22 Feb 2021 18:55:27 +0800</atom:modified><guid>https://k4i.top/en/posts/binary-indexed-tree-or-fenwick-tree/</guid><description>&lt;p>BIT can be used to compute the prefix &lt;strong>sum&lt;/strong> of an array in $log(n)$ time and takes only $O(n)$ space.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/sky-bro/AC/tree/master/Algorithms/BIT">source code&lt;/a>&lt;/p>
&lt;/blockquote></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><category>BIT</category><category>Fenwick</category><category>Tree</category><category>Data Structure &amp; Algorithm</category></item><item><title>Matrix Fast Pow</title><link>https://k4i.top/en/posts/matrix-fast-pow/</link><pubDate>Wed, 20 Jan 2021 13:22:22 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 20 Jan 2021 14:37:13 +0800</atom:modified><guid>https://k4i.top/en/posts/matrix-fast-pow/</guid><description>&lt;p>Use matrix and fast pow together can make some problems much easier.&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><category>fast pow</category><category>matrix</category><category>Data Structure &amp; Algorithm</category></item><item><title>Knapsack Problems</title><link>https://k4i.top/en/posts/knapsack-problems/</link><pubDate>Fri, 15 Jan 2021 10:51:02 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 10 Feb 2021 20:00:53 +0800</atom:modified><guid>https://k4i.top/en/posts/knapsack-problems/</guid><description>&lt;p>knapsack problem and its variations&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><media:content url="https://k4i.topimages/icons/Knapsack.svg" medium="image"><media:title type="html">featured image</media:title></media:content><category>knapsack</category><category>dp</category><category>Data Structure &amp; Algorithm</category></item><item><title>Ncurses Note</title><link>https://k4i.top/en/posts/ncurses-note/</link><pubDate>Thu, 14 Jan 2021 12:32:48 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Fri, 15 Jan 2021 10:42:27 +0800</atom:modified><guid>https://k4i.top/en/posts/ncurses-note/</guid><description>&lt;p>The &lt;strong>Curses&lt;/strong> library forms a wrapper over working with raw terminal codes, and provides highly flexible and efficient API (Application Programming Interface). It provides functions to move the cursor, create windows, produce colors, play with mouse etc. The application programs need not worry about the underlying terminal capabilities&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><category>TUI</category><category>curses</category><category>ncurses</category><category>UI</category></item><item><title>Union Find</title><link>https://k4i.top/en/posts/union-find/</link><pubDate>Sun, 10 Jan 2021 15:24:54 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Sun, 10 Jan 2021 16:58:08 +0800</atom:modified><guid>https://k4i.top/en/posts/union-find/</guid><description>&lt;p>Description from wiki: a disjoint-set data structure, also called a union–find data structure or merge–find set, is a data structure that stores a collection of disjoint (non-overlapping) sets&lt;/p>
&lt;blockquote>
&lt;p>you can easily solve &lt;a href="https://leetcode.com/problems/number-of-provinces/">leetcode: 547. Number of Provinces&lt;/a> w/ UF.&lt;br />
get UF template at &lt;a href="https://github.com/sky-bro/AC/tree/master/Algorithms/Union%20Find">github/sky-bro/AC/Algorithms/Union Find&lt;/a>&lt;/p>
&lt;/blockquote></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><category>Union Find</category><category>Data Structure &amp; Algorithm</category></item><item><title>Compile and Use Your Own Glibc</title><link>https://k4i.top/en/posts/compile-and-use-your-own-glibc/</link><pubDate>Wed, 16 Dec 2020 10:59:01 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 16 Dec 2020 12:10:46 +0800</atom:modified><guid>https://k4i.top/en/posts/compile-and-use-your-own-glibc/</guid><description>&lt;p>Easily compile and use multiple glibc on a single machine.&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><category>glibc</category><category>pwng</category><category>gcc</category><category>workspace setup</category><category>pwn setup</category></item><item><title>Tmux Basics</title><link>https://k4i.top/en/posts/tmux-basics/</link><pubDate>Wed, 16 Dec 2020 09:41:25 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 16 Dec 2020 10:37:15 +0800</atom:modified><guid>https://k4i.top/en/posts/tmux-basics/</guid><description>&lt;p>portable &amp;amp; minimal tmux configuration, with cheetsheet&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><category>tmux</category><category>cheetsheet</category><category>workspace setup</category></item><item><title>Linux Hypervisor Setup</title><link>https://k4i.top/en/posts/linux-hypervisor-setup/</link><pubDate>Thu, 10 Dec 2020 17:23:37 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Tue, 15 Dec 2020 23:21:08 +0800</atom:modified><guid>https://k4i.top/en/posts/linux-hypervisor-setup/</guid><description>&lt;p>setup hypervisor with qemu and kvm, the best linux based open source virtualization solution&lt;/p>
&lt;p>KVM is part of linux kernel, and QEMU (Quick EMUlator) is an emulator. KVM by itself cannot provide the complete virtualization solution, it needs QEMU to provide full hypervisor functionality. QEMU can emulate cpu on its own, but with KVM, QEMU can achieve near native performance by executing the guest code directly on the host CPU.&lt;/p>
&lt;p>So it&amp;rsquo;s best for them to work together.&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><category>hypervisor</category><category>kvm</category><category>qemu</category></item><item><title>Writing Guide</title><link>https://k4i.top/en/posts/writing-guide/</link><pubDate>Thu, 10 Dec 2020 16:47:19 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Mon, 14 Dec 2020 23:02:46 +0800</atom:modified><guid>https://k4i.top/en/posts/writing-guide/</guid><description>Create new post First you need to create a file for you to write. Here&amp;rsquo;s how you can create a new post:
1 2 3 4 hugo new posts/writing-guide.md # will create content/en/posts/writing-guide.md, &amp;#39;en&amp;#39; is set as my site&amp;#39;s default language hugo new posts/writing-guide.zh.md # content/zh/posts/writing-guide.zh.md hugo new posts/writing-guide/index.md # content/en/posts/writing-guide/index.md hugo new posts/writing-guide/index.zh.md # content/en/posts/writing-guide/index.zh.md I prefer to create a directory for each of my writings, so I can add extra stuff like images for that specific page more easily.</description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator></item><item><title>Wargames Bandit</title><link>https://k4i.top/en/posts/wargames-bandit/</link><pubDate>Sun, 02 Aug 2020 12:33:40 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 26 Aug 2020 20:09:33 +0800</atom:modified><guid>https://k4i.top/en/posts/wargames-bandit/</guid><description>Basic password for user &amp;ldquo;bandit0&amp;rdquo; is &amp;ldquo;bandit0&amp;rdquo; ssh into the next host, e.g: ssh -p2220 bandit0@bandit.labs.overthewire.org find password for next level goto step 2 Tricks hit &amp;lt;TAB&amp;gt; for command completion ls -a to show hidden files (names started with .) find command man command (man file) Answers level0 (password found: bandit0) level0-&amp;gt;level1: cat ./readme (password found: boJ9jbbUNNfktd78OOpsqOltutMc3MY1) level1-&amp;gt;level2: cat ./- (password found: CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9) level2-&amp;gt;level3: cat .</description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><media:content url="https://k4i.topimages/icons/tortoise.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>wargames</category><category>ctf</category><category>bandit</category></item><item><title>De Bruijn Sequence</title><link>https://k4i.top/en/posts/de-bruijn-sequence/</link><pubDate>Mon, 04 May 2020 11:58:48 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 26 Aug 2020 20:09:33 +0800</atom:modified><guid>https://k4i.top/en/posts/de-bruijn-sequence/</guid><description>&lt;p>A de Bruijn sequence of order n on a size-k alphabet A is a cyclic sequence in which every possible length-n string on A occurs exactly once as a substring.&lt;/p>
&lt;p>For a &lt;em>de Bruijn sequence&lt;/em> of order n on a size-k alphabet $A$, we denote it by $B(k, n)$&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><media:content url="https://k4i.topimages/posts/De%20Bruijn%20sequence/example01.jpg" medium="image"><media:title type="html">featured image</media:title></media:content><category>math</category><category>dfs</category><category>Data Structure &amp; Algorithm</category></item><item><title>Use Random in C++</title><link>https://k4i.top/en/posts/use-random-in-c++/</link><pubDate>Sat, 18 Apr 2020 10:04:13 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 26 Aug 2020 20:09:33 +0800</atom:modified><guid>https://k4i.top/en/posts/use-random-in-c++/</guid><description>Old way use rand(), usually pair with a random initialization of the seed:
1 2 srand(int(time(0))); // initialize the seed rand(); // get a random int, [0, RAND_MAX] get random int in [0,x): rand()%x
get random real in [0, 1]: rand()/double(RAND_MAX)
Modern way 1 2 3 4 5 // ... #include &amp;lt;random&amp;gt; std::random_device rng; std::mt19937 urng(rng()); random_device random_device is a uniformly-distributed integer random number generator that produces non-deterministic random numbers.</description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><media:content url="https://k4i.topimages/icons/dice-white.svg" medium="image"><media:title type="html">featured image</media:title></media:content><category>RNG</category><category>C++</category><category>Random</category><category>STL</category><category>C++</category><category>Crypto</category></item><item><title>cin &amp; cout is slow?</title><link>https://k4i.top/en/posts/cin-cout-is-slow/</link><pubDate>Fri, 17 Apr 2020 16:07:30 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 26 Aug 2020 20:09:33 +0800</atom:modified><guid>https://k4i.top/en/posts/cin-cout-is-slow/</guid><description>Yes, by default I heard before that using scanf/printf is faster than using cin/cout, and it&amp;rsquo;s true from my real experience, but I really didn&amp;rsquo;t get to know the reason behind, and later in leetcode, I saw others include these lines in their code:
1 2 3 ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL); I&amp;rsquo;m almost certain that these lines are included to speed up their code. So out of curiosity, I did some searching, here&amp;rsquo;s what I&amp;rsquo;ve found:</description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><media:content url="https://k4i.topimages/icons/tortoise.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>C++</category><category>C++</category></item><item><title>Segment Tree (Iterative)</title><link>https://k4i.top/en/posts/segment-tree-iterative/</link><pubDate>Fri, 17 Apr 2020 15:53:35 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 26 Aug 2020 20:09:33 +0800</atom:modified><guid>https://k4i.top/en/posts/segment-tree-iterative/</guid><description>&lt;p>A segment tree is a binary tree where each node represents an interval. Each node stores some property of its corresponding interval: like the maximum/minimum num, the sum of that interval.&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><media:content url="https://k4i.topimages/posts/segment%20tree/iterative02.svg" medium="image"><media:title type="html">featured image</media:title></media:content><category>segment tree</category><category>Data Structure &amp; Algorithm</category><category>segment tree</category></item><item><title>Heap in C++</title><link>https://k4i.top/en/posts/heap-in-c++/</link><pubDate>Fri, 17 Apr 2020 15:25:33 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 26 Aug 2020 20:09:33 +0800</atom:modified><guid>https://k4i.top/en/posts/heap-in-c++/</guid><description>let&amp;rsquo;s learn how to use heap in C++
Related functions func description make_heap Make heap from range push_heap Push element into heap range pop_heap Pop element from heap range sort_heap Sort elements of heap is_heap Test if range is heap is_heap_until Find first element not in heap order make_heap make heap from range</description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><media:content url="https://k4i.topimages/icons/stack%20of%20rocks.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>C++</category><category>heap</category><category>Data Structure &amp; Algorithm</category></item></channel></rss>