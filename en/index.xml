<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Kyle&#39;s Blog</title>
    <link>https://sky-bro.github.io/en/</link>
    <description>Recent content on Kyle&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>sky_io@outlook.com (Kyle)</managingEditor>
    <webMaster>sky_io@outlook.com (Kyle)</webMaster>
    <copyright>All content is subject to the license of &lt;a rel=&#34;license noopener&#34; href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/&#34; target=&#34;_blank&#34;&gt;CC BY-NC-SA 4.0&lt;/a&gt; .</copyright>
    
        <atom:link href="https://sky-bro.github.io/en/index.xml" rel="self" type="application/rss+xml" />
    
    
    
      
      
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      
        
      

      
      <item>
        <title>Wargames Bandit</title>
        <link>https://sky-bro.github.io/en/posts/wargames-bandit/</link>
        <pubDate>Sun, 02 Aug 2020 12:33:40 +0800</pubDate>
        <author>sky_io@outlook.com (Kyle)</author>
        <atom:modified>Wed, 26 Aug 2020 10:37:00 +0800</atom:modified>
        <guid>https://sky-bro.github.io/en/posts/wargames-bandit/</guid>
        <description>Basic  password for user &amp;ldquo;bandit0&amp;rdquo; is &amp;ldquo;bandit0&amp;rdquo; ssh into the next host, e.g: ssh -p2220 bandit0@bandit.labs.overthewire.org find password for next level goto step 2  Tricks  hit &amp;lt;TAB&amp;gt; for command completion ls -a to show hidden files (names started with .) find command man command (man file)  Answers  level0 (password found: bandit0) level0-&amp;gt;level1: cat ./readme (password found: boJ9jbbUNNfktd78OOpsqOltutMc3MY1) level1-&amp;gt;level2: cat ./- (password found: CV1DtqXWVFXTvM2F0k09SHz0YwRINYA9) level2-&amp;gt;level3: cat .</description>
        
        <dc:creator>&lt;a href=&#34;https://sky-bro.github.io&#34; class=&#34;theme-link&#34;&gt;Kyle&lt;/a&gt;</dc:creator>
        <media:content url="https://sky-bro.github.ioimages/icons/tortoise.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>wargames</category>
            
          
        
        
          
            
              <category>ctf</category>
            
          
        
        
          
            
              <category>bandit</category>
            
          
        
      </item>
      
      <item>
        <title>De Bruijn Sequence</title>
        <link>https://sky-bro.github.io/en/posts/de-bruijn-sequence/</link>
        <pubDate>Mon, 04 May 2020 11:58:48 +0800</pubDate>
        <author>sky_io@outlook.com (Kyle)</author>
        <atom:modified>Wed, 26 Aug 2020 10:37:00 +0800</atom:modified>
        <guid>https://sky-bro.github.io/en/posts/de-bruijn-sequence/</guid>
        <description>&lt;p&gt;A de Bruijn sequence of order n on a size-k alphabet A is a cyclic sequence in which every possible length-n string on A occurs exactly once as a substring.&lt;/p&gt;
&lt;p&gt;For a &lt;em&gt;de Bruijn sequence&lt;/em&gt; of order n on a size-k alphabet $A$, we denote it by $B(k, n)$&lt;/p&gt;</description>
        
        <dc:creator>&lt;a href=&#34;https://sky-bro.github.io&#34; class=&#34;theme-link&#34;&gt;Kyle&lt;/a&gt;</dc:creator>
        <media:content url="https://sky-bro.github.ioimages/posts/De%20Bruijn%20sequence/example01.jpg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>math</category>
            
          
            
              <category>dfs</category>
            
          
        
        
          
            
              <category>Data Structure &amp; Algorithm</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Use Random in C&#43;&#43;</title>
        <link>https://sky-bro.github.io/en/posts/use-random-in-c&#43;&#43;/</link>
        <pubDate>Sat, 18 Apr 2020 10:04:13 +0800</pubDate>
        <author>sky_io@outlook.com (Kyle)</author>
        <atom:modified>Wed, 26 Aug 2020 10:37:00 +0800</atom:modified>
        <guid>https://sky-bro.github.io/en/posts/use-random-in-c&#43;&#43;/</guid>
        <description>Old way use rand(), usually pair with a random initialization of the seed:
1 2  srand(int(time(0))); // initialize the seed rand(); // get a random int, [0, RAND_MAX]   get random int in [0,x): rand()%x
get random real in [0, 1]: rand()/double(RAND_MAX)
Modern way 1 2 3 4 5  // ... #include &amp;lt;random&amp;gt; std::random_device rng; std::mt19937 urng(rng());   random_device random_device is a uniformly-distributed integer random number generator that produces non-deterministic random numbers.</description>
        
        <dc:creator>&lt;a href=&#34;https://sky-bro.github.io&#34; class=&#34;theme-link&#34;&gt;Kyle&lt;/a&gt;</dc:creator>
        <media:content url="https://sky-bro.github.ioimages/icons/dice-white.svg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>RNG</category>
            
          
            
              <category>C&#43;&#43;</category>
            
          
            
              <category>Random</category>
            
          
            
              <category>STL</category>
            
          
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
            
              <category>Crypto</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>cin &amp; cout is slow?</title>
        <link>https://sky-bro.github.io/en/posts/cin-cout-is-slow/</link>
        <pubDate>Fri, 17 Apr 2020 16:07:30 +0800</pubDate>
        <author>sky_io@outlook.com (Kyle)</author>
        <atom:modified>Wed, 26 Aug 2020 10:37:00 +0800</atom:modified>
        <guid>https://sky-bro.github.io/en/posts/cin-cout-is-slow/</guid>
        <description>Yes, by default I heard before that using scanf/printf is faster than using cin/cout, and it&amp;rsquo;s true from my real experience, but I really didn&amp;rsquo;t get to know the reason behind, and later in leetcode, I saw others include these lines in their code:
1 2 3  ios::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);   I&amp;rsquo;m almost certain that these lines are included to speed up their code. So out of curiosity, I did some searching, here&amp;rsquo;s what I&amp;rsquo;ve found:</description>
        
        <dc:creator>&lt;a href=&#34;https://sky-bro.github.io&#34; class=&#34;theme-link&#34;&gt;Kyle&lt;/a&gt;</dc:creator>
        <media:content url="https://sky-bro.github.ioimages/icons/tortoise.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
          
            
          
        
      </item>
      
      <item>
        <title>Segment Tree (Iterative)</title>
        <link>https://sky-bro.github.io/en/posts/segment-tree-iterative/</link>
        <pubDate>Fri, 17 Apr 2020 15:53:35 +0800</pubDate>
        <author>sky_io@outlook.com (Kyle)</author>
        <atom:modified>Wed, 26 Aug 2020 10:37:00 +0800</atom:modified>
        <guid>https://sky-bro.github.io/en/posts/segment-tree-iterative/</guid>
        <description>&lt;p&gt;A segment tree is a binary tree where each node represents an interval. Each node stores some property of its corresponding interval: like the maximum/minimum num, the sum of that interval.&lt;/p&gt;</description>
        
        <dc:creator>&lt;a href=&#34;https://sky-bro.github.io&#34; class=&#34;theme-link&#34;&gt;Kyle&lt;/a&gt;</dc:creator>
        <media:content url="https://sky-bro.github.ioimages/posts/segment%20tree/iterative02.svg" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>segment tree</category>
            
          
        
        
          
            
              <category>Data Structure &amp; Algorithm</category>
            
          
        
        
          
            
              <category>segment tree</category>
            
          
        
      </item>
      
      <item>
        <title>Heap in C&#43;&#43;</title>
        <link>https://sky-bro.github.io/en/posts/heap-in-c&#43;&#43;/</link>
        <pubDate>Fri, 17 Apr 2020 15:25:33 +0800</pubDate>
        <author>sky_io@outlook.com (Kyle)</author>
        <atom:modified>Wed, 26 Aug 2020 10:37:00 +0800</atom:modified>
        <guid>https://sky-bro.github.io/en/posts/heap-in-c&#43;&#43;/</guid>
        <description>let&amp;rsquo;s learn how to use heap in C++
Related functions    func description     make_heap Make heap from range   push_heap Push element into heap range   pop_heap Pop element from heap range   sort_heap Sort elements of heap   is_heap Test if range is heap   is_heap_until Find first element not in heap order    make_heap  make heap from range</description>
        
        <dc:creator>&lt;a href=&#34;https://sky-bro.github.io&#34; class=&#34;theme-link&#34;&gt;Kyle&lt;/a&gt;</dc:creator>
        <media:content url="https://sky-bro.github.ioimages/icons/stack%20of%20rocks.png" medium="image"><media:title type="html">featured image</media:title></media:content>
        
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
            
              <category>heap</category>
            
          
        
        
          
            
              <category>Data Structure &amp; Algorithm</category>
            
          
        
        
          
            
          
        
      </item>
      

    
  </channel>
</rss>