<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>notes on k4i's blog</title><link>https://k4i.top/categories/notes/</link><description>Recent content in notes on k4i's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>sky_io@outlook.com (K4i)</managingEditor><webMaster>sky_io@outlook.com (K4i)</webMaster><copyright>All content is subject to the license of<a rel="license noopener" href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">CC BY-NC-SA 4.0</a> .</copyright><lastBuildDate>Mon, 06 Dec 2021 20:56:00 +0800</lastBuildDate><atom:link href="https://k4i.top/categories/notes/index.xml" rel="self" type="application/rss+xml"/><item><title>Vim Notes</title><link>https://k4i.top/posts/vim-notes/</link><pubDate>Mon, 06 Dec 2021 20:56:00 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Mon, 06 Dec 2021 21:00:03 +0800</atom:modified><guid>https://k4i.top/posts/vim-notes/</guid><description>my simple config my simple config can be found here: .dotfiles/.vimrc
widows C-w s horizontal split window C-w v vertical split window C-w q quit a window C-w h/j/k/l move between windows C-w H/J/K/L make current master window C-w +/- inc/dec height, can prepend with a number C-w &amp;gt;/&amp;lt; inc/dec width, can prepend with a number jump C-o jump back C-i jump forward References Vim Cheat Sheet vi / vim graphical cheat sheet</description><dc:creator>K4i</dc:creator><media:content url="https://k4i.top/images/icons/vim-logo.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>vim</category><category>editor</category><category>notes</category></item><item><title>Writing Guide (org + ox-hugo)</title><link>https://k4i.top/posts/writing-guide-org-plus-ox-hugo/</link><pubDate>Sun, 05 Dec 2021 20:58:00 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Sun, 05 Dec 2021 21:28:05 +0800</atom:modified><guid>https://k4i.top/posts/writing-guide-org-plus-ox-hugo/</guid><description>I&amp;rsquo;ve recently switched to org mode, now I write all my blogs in org mode (blog-src/content-org/), and export them to .md files (blog-src/content/) with ox-hugo.
So instead of editing .md files under content folder, now I write .org files stored under content-org folder.
Create new post Invoking org-capture-templates function, and choose hugo post template, as shown in Figure 1
Figure 1: creating new post with org-capture-template
Front matter As in ox-hugo: Custom Front-matter Parameters, hugo front matters can be added like below:</description><dc:creator>K4i</dc:creator><media:content url="https://k4i.top/images/icons/org-mode-unicorn.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>hugo</category><category>org</category><category>notes</category></item><item><title>Golang Notes</title><link>https://k4i.top/posts/golang-notes/</link><pubDate>Thu, 25 Nov 2021 00:30:00 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Thu, 25 Nov 2021 00:39:38 +0800</atom:modified><guid>https://k4i.top/posts/golang-notes/</guid><description>Basics Packages every go programs is made up of packages, entry function: func main()
import statements could be grouped together using parenthesis (&amp;ldquo;factored&amp;rdquo;
import statements)
1 2 import &amp;#34;fmt&amp;#34; import &amp;#34;math&amp;#34; same as:
1 2 3 4 import ( &amp;#34;fmt&amp;#34; &amp;#34;math&amp;#34; ) Capitalized names are exported, when importing a package, you can only refer
its exported names.
Basic Types 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 package main import ( &amp;#34;fmt&amp;#34; &amp;#34;math/cmplx&amp;#34; ) // bool // string // int int8 int16 int32 int 64 // uint uint8 uint16 uint32 uint64 unitptr // bytes // alias for uint8 // rune // alias for int32, represents a unicode code point // float32 float64 // complex64 complex128 var ( ToBe bool = false MaxInt uint64 = 1&amp;lt;&amp;lt;64 - 1 z complex128 = cmplx.</description><dc:creator>K4i</dc:creator><category>golang</category><category>notes</category></item></channel></rss>