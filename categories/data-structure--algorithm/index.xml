<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>Data Structure &amp; Algorithm on k4i's blog</title><link>https://k4i.top/categories/data-structure--algorithm/</link><description>Recent content in Data Structure &amp; Algorithm on k4i's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><managingEditor>sky_io@outlook.com (K4i)</managingEditor><webMaster>sky_io@outlook.com (K4i)</webMaster><copyright>All content is subject to the license of<a rel="license noopener" href="https://creativecommons.org/licenses/by-nc-sa/4.0/" target="_blank">CC BY-NC-SA 4.0</a> .</copyright><lastBuildDate>Wed, 19 May 2021 14:07:34 +0800</lastBuildDate><atom:link href="https://k4i.top/categories/data-structure--algorithm/index.xml" rel="self" type="application/rss+xml"/><item><title>Shuffling</title><link>https://k4i.top/posts/shuffling/</link><pubDate>Wed, 19 May 2021 14:07:34 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 19 May 2021 15:49:51 +0800</atom:modified><guid>https://k4i.top/posts/shuffling/</guid><description>&lt;p>How to generate a random sequence (permutation) of a finite sequence.&lt;/p></description><dc:creator>&lt;a href="https://k4i.top" class="theme-link">k4i&lt;/a></dc:creator><media:content url="https://k4i.top/images/icons/shuffle.jpg" medium="image"><media:title type="html">featured image</media:title></media:content><category>shuffle</category><category>random</category><category>Data Structure &amp; Algorithm</category></item><item><title>Heap Simple Implementation</title><link>https://k4i.top/posts/heap-simple-implementation/</link><pubDate>Sun, 11 Apr 2021 16:17:17 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Sun, 11 Apr 2021 20:10:19 +0800</atom:modified><guid>https://k4i.top/posts/heap-simple-implementation/</guid><description>&lt;p>max_heap: &lt;code>A[0]&lt;/code> is the maximum value&lt;br />
min_heap: &lt;code>A[0]&lt;/code> is the minimum value&lt;br />
source code: &lt;a href="https://github.com/sky-bro/AC/tree/master/Algorithms/Heap">AC/Algorithms/Heap&lt;/a>&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><category>heap</category><category>Data Structure &amp; Algorithm</category></item><item><title>Understand RSA, a Top Dwon Approach</title><link>https://k4i.top/posts/understand-rsa-a-top-dwon-approach/</link><pubDate>Wed, 03 Feb 2021 12:12:54 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Thu, 04 Feb 2021 13:45:32 +0800</atom:modified><guid>https://k4i.top/posts/understand-rsa-a-top-dwon-approach/</guid><description>&lt;p>My simple note on the RSA algorithm.&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><category>RSA</category><category>Crypto</category><category>Crypto</category><category>Data Structure &amp; Algorithm</category></item><item><title>Binary Indexed Tree, or Fenwick Tree</title><link>https://k4i.top/posts/binary-indexed-tree-or-fenwick-tree/</link><pubDate>Wed, 20 Jan 2021 14:42:38 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Mon, 22 Feb 2021 18:55:27 +0800</atom:modified><guid>https://k4i.top/posts/binary-indexed-tree-or-fenwick-tree/</guid><description>&lt;p>BIT can be used to compute the prefix &lt;strong>sum&lt;/strong> of an array in $log(n)$ time and takes only $O(n)$ space.&lt;/p>
&lt;blockquote>
&lt;p>&lt;a href="https://github.com/sky-bro/AC/tree/master/Algorithms/BIT">source code&lt;/a>&lt;/p>
&lt;/blockquote></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><category>BIT</category><category>Fenwick</category><category>Tree</category><category>Data Structure &amp; Algorithm</category></item><item><title>Matrix Fast Pow</title><link>https://k4i.top/posts/matrix-fast-pow/</link><pubDate>Wed, 20 Jan 2021 13:22:22 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Mon, 18 Apr 2022 16:48:00 +0800</atom:modified><guid>https://k4i.top/posts/matrix-fast-pow/</guid><description>&lt;p>Use matrix and fast pow together can make some problems much easier.&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><category>fast pow</category><category>matrix</category><category>Data Structure &amp; Algorithm</category></item><item><title>Knapsack Problems</title><link>https://k4i.top/posts/knapsack-problems/</link><pubDate>Fri, 15 Jan 2021 10:51:02 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 10 Feb 2021 20:00:53 +0800</atom:modified><guid>https://k4i.top/posts/knapsack-problems/</guid><description>&lt;p>knapsack problem and its variations&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><media:content url="https://k4i.top/images/icons/Knapsack.svg" medium="image"><media:title type="html">featured image</media:title></media:content><category>knapsack</category><category>dp</category><category>Data Structure &amp; Algorithm</category></item><item><title>Union Find</title><link>https://k4i.top/posts/union-find/</link><pubDate>Sun, 10 Jan 2021 15:24:54 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Mon, 18 Apr 2022 16:48:00 +0800</atom:modified><guid>https://k4i.top/posts/union-find/</guid><description>&lt;p>Description from wiki: a disjoint-set data structure, also called a union–find data structure or merge–find set, is a data structure that stores a collection of disjoint (non-overlapping) sets&lt;/p>
&lt;blockquote>
&lt;p>you can easily solve &lt;a href="https://leetcode.com/problems/number-of-provinces/">leetcode: 547. Number of Provinces&lt;/a> w/ UF.&lt;br />
get UF template at &lt;a href="https://github.com/sky-bro/AC/tree/master/Algorithms/Union%20Find">github/sky-bro/AC/Algorithms/Union Find&lt;/a>&lt;/p>
&lt;/blockquote></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><category>Union Find</category><category>Data Structure &amp; Algorithm</category></item><item><title>De Bruijn Sequence</title><link>https://k4i.top/posts/de-bruijn-sequence/</link><pubDate>Mon, 04 May 2020 11:58:48 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 26 Aug 2020 20:09:33 +0800</atom:modified><guid>https://k4i.top/posts/de-bruijn-sequence/</guid><description>&lt;p>A de Bruijn sequence of order n on a size-k alphabet A is a cyclic sequence in which every possible length-n string on A occurs exactly once as a substring.&lt;/p>
&lt;p>For a &lt;em>de Bruijn sequence&lt;/em> of order n on a size-k alphabet $A$, we denote it by $B(k, n)$&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><media:content url="https://k4i.top/images/posts/De%20Bruijn%20sequence/example01.jpg" medium="image"><media:title type="html">featured image</media:title></media:content><category>math</category><category>dfs</category><category>Data Structure &amp; Algorithm</category></item><item><title>Segment Tree (Iterative)</title><link>https://k4i.top/posts/segment-tree-iterative/</link><pubDate>Fri, 17 Apr 2020 15:53:35 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 26 Aug 2020 20:09:33 +0800</atom:modified><guid>https://k4i.top/posts/segment-tree-iterative/</guid><description>&lt;p>A segment tree is a binary tree where each node represents an interval. Each node stores some property of its corresponding interval: like the maximum/minimum num, the sum of that interval.&lt;/p></description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><media:content url="https://k4i.top/images/posts/segment%20tree/iterative02.svg" medium="image"><media:title type="html">featured image</media:title></media:content><category>segment tree</category><category>Data Structure &amp; Algorithm</category><category>segment tree</category></item><item><title>Heap in C++</title><link>https://k4i.top/posts/heap-in-c++/</link><pubDate>Fri, 17 Apr 2020 15:25:33 +0800</pubDate><author>sky_io@outlook.com (K4i)</author><atom:modified>Wed, 26 Aug 2020 20:09:33 +0800</atom:modified><guid>https://k4i.top/posts/heap-in-c++/</guid><description>let&amp;rsquo;s learn how to use heap in C++
Related functions func description make_heap Make heap from range push_heap Push element into heap range pop_heap Pop element from heap range sort_heap Sort elements of heap is_heap Test if range is heap is_heap_until Find first element not in heap order make_heap make heap from range
We need to have a heap before we operate on a heap, make_heap let&amp;rsquo;s us rearrange elements in a range.</description><dc:creator>&lt;a href="https://sky-bro.github.io" class="theme-link">Kyle&lt;/a></dc:creator><media:content url="https://k4i.top/images/icons/stack%20of%20rocks.png" medium="image"><media:title type="html">featured image</media:title></media:content><category>C++</category><category>heap</category><category>Data Structure &amp; Algorithm</category></item></channel></rss>